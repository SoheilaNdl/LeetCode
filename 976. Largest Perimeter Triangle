class Solution(object):
    def largestPerimeter(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        for i in xrange(len(nums) - 3, -1, -1):
            if (((nums[i + 0] + nums[i + 1]) > nums[i + 2])):
                return nums[i + 0] + nums[i + 1] + nums[i + 2]
        return 0

#         nums.sort()
#         largest = 0
#         for i in range(len(nums)-2):   
#             if (((nums[i + 0] + nums[i + 1]) > nums[i + 2])):
#                 my_sum = nums[i + 0] + nums[i + 1] + nums[i + 2]
#                 if largest < my_sum:
#                     largest = my_sum

#         return largest
# Runtime: 187 ms, faster than 64.65% of Python online submissions for Largest Perimeter Triangle.
# Memory Usage: 14.8 MB, less than 53.19% of Python online submissions for Largest Perimeter Triangle.


